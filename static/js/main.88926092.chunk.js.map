{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","green","TextForm","useState","text","setText","style","color","heading","value","rows","onChange","event","target","backgroundColor","btn","newText","toUpperCase","showAlert","toLowerCase","newtext","split","reverse","join","txt","document","getElementById","select","navigator","clipboard","writeText","length","defaultProps","Alert","alert","word","low","charAt","slice","capitalise","msg","App","setMode","setAlert","setBtn","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.88926092.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/\">About</a>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\"> */}\r\n         \r\n        {/* <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button> */}\r\n      {/* </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick ={props.toggleMode}/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable Dark Mode</label>\r\n\r\n        {/* <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick ={props.toggleMode}/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable Dark Mode</label> */}\r\n      </div>\r\n\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n      \r\n      <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"greenMode\" onClick={props.green}/>\r\n        <label className=\"form-check-label\" htmlFor=\"greenMode\" >Enable Green Mode</label>\r\n        </div>\r\n    \r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\n// Navbar.propTypes = {\r\n//     title: PropTypes.string\r\n// }\r\n\r\nNavbar.defaultProps = {\r\n    title: \"set title here\"\r\n}","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const Handleupclick = ()=>{\r\n        // console.log(\"Uppercase was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to upper case\",\"success\")\r\n        // setText(\"You have clicked on handleUpClick\")\r\n        }\r\n\r\n        const Handleloclick = ()=>{\r\n            // console.log(\"Uppercase was clicked\");\r\n            let newText = text.toLowerCase();\r\n            setText(newText);\r\n        props.showAlert(\"Converted to lower case\",\"success\")\r\n\r\n            // setText(\"You have clicked on handleUpClick\")\r\n            }\r\n            const reverseonclick = ()=>{\r\n\r\n                let newtext = text.split(/\\s/).reverse().join(\" \");\r\n                setText(newtext);\r\n        props.showAlert(\"Text is reversed\",\"success\")\r\n                \r\n            }\r\n        const Handleonchange = (event)=>{\r\n            setText(event.target.value);\r\n        }\r\n        const handleCopy = ()=>{\r\n            let txt = document.getElementById('mybox');\r\n            txt.select();\r\n            navigator.clipboard.writeText(txt.value);\r\n        props.showAlert(\"Text is successfully copied to clipboard\",\"success\")\r\n\r\n        }\r\n    const [text,setText] = useState('Enter text here');\r\n    // text = \"new text\";   this is wrong way to update state. we cant change state directly\r\n    // setText=('New Text')  correct way\r\n    return (\r\n        <>\r\n        <div className=\"container my-3\" style ={{color:props.mode==='dark'?'white':'black'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                <textarea className=\"form-control \" id=\"mybox\" value={text} rows=\"6\" onChange = {Handleonchange} style ={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}}></textarea>\r\n                <button className={`btn btn-${props.btn} my-3 mx-3`} onClick={Handleupclick}>Convert to Upper Case</button>\r\n                <button className={`btn btn-${props.btn} my-3 mx-3`} onClick={Handleloclick}>Convert to Lower Case</button>\r\n                <button className={`btn btn-${props.btn} my-3 mx-3`} onClick={reverseonclick}>Reverse your text</button>\r\n                <button className={`btn btn-${props.btn} my-3 mx-3`} onClick={handleCopy}>Copy your text</button>\r\n                </div>\r\n        </div>\r\n        <div className=\"container my-3\" style ={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h1>Your Text summary</h1>\r\n            <p>\r\n                {text.split(/[ ][a-zA-Z0-9]/).length} words and {text.length} characters.\r\n            </p>\r\n            <p>\r\n                {0.008 * text.split(\" \").length} minutes to read.\r\n            </p>\r\n            <h2>\r\n                Preview\r\n            </h2>\r\n            <p>{text.length>0?text:\"Enter your text in above box to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalise=(word)=>{\r\n        const low = word.toLowerCase();\r\n        return low.charAt(0).toUpperCase() + low.slice(1);\r\n    }\r\n    return (\r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalise(props.alert.type)}</strong> : <strong>{props.alert.msg}</strong>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport React, { useState } from 'react'\n\nimport TextForm from './components/TextForm';\nimport Alert from \"./components/Alert\";\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode,setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const [btn, setBtn] = useState('primary');\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n  const toggleMode= ()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\")\n      // document.title=\"TextUtils-Home(Dark)\"\n      setBtn('primary');\n      \n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\")\n      setBtn('primary');\n\n    }\n  }\n\n  const green = ()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#002100';\n      showAlert(\"Green mode has been enabled\", \"success\")\n      // document.title=\"TextUtils-Home(Green)\"\n      setBtn('success');\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\")\n      setBtn('primary');\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"Textutils\" mode ={mode} toggleMode = {toggleMode} green={green}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      {/* <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n\n          </Route>\n        </Switch> */}\n        {/* <About/> */}\n          <TextForm heading=\"Enter the text to analyze\" mode ={mode} showAlert={showAlert}  btn = {btn}/>\n\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}